long long int mergee(long long arr[], int l,int mid,int h) {
    int i = l, j = mid+1,k=0;
    long long int inv=0;

    long long* c;
    c = new long long[h];
    
    while (i <=mid && j <= h) {
        if (arr[i] <= arr[j]) {
            c[k++] = arr[i++];
        }
        else {
            c[k++] = arr[j++];

            inv += 1;
        }
    }

    for (; i <= mid; i++) {
        c[k++] = arr[i];
    }

    for (; j <= h; j++) {
        c[k++] = arr[j];
    }

    for (int i = l; i <= h; i++) {
        arr[i] = c[i];
    }
    
    return inv;
}

long long int mergesort(long long arr[], int l, int h) {
    long long int inv = 0;
    int mid;
    if (l < h) {
        mid = (l + h) / 2;
        inv += mergesort(arr, l, mid);
        inv += mergesort(arr, mid + 1, h);
        inv += mergee(arr, l, mid, h);
    }

    return inv;
}

long long int inversionCount(long long arr[], long long N)
{
    long long int inv = 0;
    inv = mergesort(arr, 0, N-1);
    return inv;
}

////////another one
vector<int> factorial(int N) {
    int i = N-1;
    long long int n = N;
    vector<int>v;
    while (i > 0) {
        n *= i;
        if (n % 10 == 0) {
            v.push_back(0);
            n /= 10;
        }
        i--;
    }

    while (n != 0) {
        v.push_back(n % 10);
        n /= 10;
    }

    reverse(v.begin(), v.end());
    return v;
}